#!/usr/bin/env node

var cli = require('cli');
var path = require('path');
var fs = require('fs');
var os = require('os');
var airplay = require('../airplay');

var startBrowser = function(videoURL) {
    var browser = airplay.createBrowser();
    browser.on('deviceOn', function(device) {
        console.info(device.info.name);
        device.play(videoURL, 0, function() {
            console.info('video playing ...');
        });
    });
    browser.start();
};

var cleanupIfNeeded = function() {
    var tsDir = path.join(os.tmpdir(), 'airplay');
    if (!fs.existsSync(tsDir)) {
        return;
    }
    fs.readdirSync(tsDir).forEach(function(file, index){
        var curPath = tsDir + "/" + file;
        if (curPath.match("\.ts$")) {
            fs.unlinkSync(curPath);
        }
    });
}

cli.setUsage('airplay [OPTIONS] file-or-url')

cli.parse({
    'port': ['p', 'Port to host the video', 7000]
});

cli.main(function(args, options){
    var port = options.port ? options.port : 7000;
    var file = args[0];

    if (!file) {
        this.error("Missing parameter: file");
        return;
    }
    
    if (!fs.existsSync(file)) {
        this.error("File not found: ", file);
        return;
    }

    if (file.match(/^http/)) {
        startBrowser(file);

    } else {
        // local video (by HLS)

        // cleanup and create temp folder
        var tsDir = path.join(os.tmpdir(), 'airplay');
        if (fs.existsSync(tsDir)) {
            cleanupIfNeeded();
        } else {
            fs.mkdirSync(tsDir);
        }

        // Start HLS and start airplay browser
        var hls = airplay.createHLS({out: tsDir});
        hls.start(port);
        hls.open(file, function(info) {
            console.info('File hosted at ' + hls.getURI());
            startBrowser(hls.getURI());
        });
    }
});

var exitHandler = function(options) {
    cleanupIfNeeded();
    if (options.exit) {
        process.exit();
    }
}

//do something when app is closing
process.on('exit', exitHandler.bind(null, {}));

//catches ctrl+c event
process.on('SIGINT', exitHandler.bind(null, {exit:true}));
